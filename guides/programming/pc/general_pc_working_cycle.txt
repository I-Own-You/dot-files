Где хранится ОС:
    Операционная система хранится на постоянном носителе:
        1. SSD / HDD
        2. иногда во встроенной флеш-памяти (например, в смартфонах или роутерах)

Когда ты включаешь компьютер:
    1. Процессор сначала ищет прошивку BIOS/UEFI в чипе на материнке:
        как процессор ищет прошивку ? это заложено в самом процессоре на уровне схемотехники.
        1. Процессор после сброса (reset state):
            1. Когда ты включаешь питание:
                1. CPU начинает с фиксированного стартового адреса в своей архитектуре.
                2. Этот адрес жёстко «зашит» в логику процессора (в микросхему).
        2. Что находится по этому адресу:
            1. Материнская плата подключает к этим адресам SPI-флеш-чип с BIOS/UEFI.
                1. Физически — это маленькая микросхема (8-ногая), где хранится прошивка:
                    1. прошивка - микропрограмма которая дает возможность утсройству быть самостоятельным в его собственной памяти:
                        1. нужна она устройству которое имеет логику управления
                        2. прошивка может быть у любого чипа который имеет какой либо мозг(микроконтроллер, управляющее ядро, процессор, и тд.)
                        3. не у всех устройств есть прошивка, например память обходится без нее
                2. При старте CPU делает «fetch instruction» (загружает первую команду) именно оттуда.
            2. Таким образом:
                1. CPU после сброса «смотрит» в фиксированный адрес.
                2. Там не RAM (она ещё не инициализирована), а прошивка BIOS/UEFI.
                3. Первая инструкция оттуда запускает выполнение кода.
            3. Как это выглядит вживую:
                1. Ты включил ПК → CPU получает питание.
                2. Внутри CPU логика указывает: «начинай выполнять код с адреса 0xFFFF0».
                3. Этот адрес отображается на SPI-флеш, где хранится BIOS.
                4. CPU читает первую инструкцию BIOS и выполняет её.
                5. Дальше уже сам BIOS инициализирует RAM, чипсет, PCIe и т.д.
    2. BIOS/UEFI инициализирует базовое железо (память, контроллеры, видео, клаву).
        сам BIOS это тоже микропрограмма(firmware) на чипе материнской платы
    3. Потом BIOS/UEFI ищет загрузчик (bootloader) на диске:
        bootloader - маленькая программа, которая загружается сразу после BIOS/UEFI и занимается запуском операционной системы
        1. В Windows это Boot Manager,
        2. в Linux — GRUB,
        3. в телефонах — свой загрузчик.
    4. Загрузчик(bootloader) копирует ядро ОС из диска в оперативную память (RAM).
        ядро ОС - мост между программами и физическим устройством
        обязанности: 
            1. Управление процессами:
                1. Определяет, какая программа получает доступ к процессору и на сколько времени.
                2. Делает так, чтобы несколько программ могли работать одновременно (многозадачность).
            2. Управление памятью:
                1. Выделяет RAM для программ.
                2. Защищает одну программу от другой, чтобы они не портили данные друг друга.
            3. Управление устройствами (через драйверы, путем системных вызовов):
                1. Общается с дисками, видеокартами, сетевыми картами, клавиатурой, мышью и т.д.
                2. Программы не знают детали железа — ядро переводит их команды в понятный устройствам язык.
            4. Файловая система:
                1. С ядром программы видят файлы как логические объекты (C:\file.txt), а ядро преобразует это в реальные блоки на диске.
            5. Сетевое взаимодействие:
                1. Управляет пакетами данных, сетевыми интерфейсами и соединениями.
    5. Дальше всё управление берёт на себя уже ОС:
        1. ОС работает из оперативной памяти, а хранится на диске.
        2. теперь ядро уже контролирует CPU.
        3. Ядро инициализирует драйверы устройств и системные службы.
        4. После этого запускаются пользовательские программы: браузер, игра, терминал.

Уровни работы (сверху вниз):
    1. Уровень приложений (то, что видит пользователь):
        1. Ты запускаешь браузер, игру или текстовый редактор.
        2. Программа сама не умеет обращаться к железу напрямую → она вызывает системные вызовы ОС (например: «сохрани файл», «выведи картинку»).
    2. Уровень операционной системы:
        1. ОС состоит из ядра и системных утилит.
        2. Ядро управляет:
            1. памятью (кто сколько RAM получает),
            2. процессами (какая программа сейчас работает на CPU),
            3. устройствами (через драйверы),
            4. файловой системой (как данные на диске превращаются в файлы/папки).
    Программа говорит: «запиши эти данные в файл» → ядро через драйвер даёт команду дисковому контроллеру → тот уже пишет в физические сектора SSD.

Уровень драйверов:
    1. Драйвер — это «переводчик» между ОС и конкретным устройством.
    2. Без драйвера ОС не знает, как общаться с железом.
    Пример: видеокарта умеет «рисовать треугольники», но ОС об этом не знает → драйвер переводит команды OpenGL/DirectX в машинный язык GPU.

Уровень контроллеров и firmware:
    (
        1. Контроллер + прошивка = работа устройства
        2. Прошивка — это код, который говорит, что делать.
        3. Контроллер — это “мозг”, который исполняет этот код.
        4. Вместе они делают устройство «умным»: без контроллера прошивка бесполезна, а без прошивки контроллер просто «ждёт инструкций».
    )
    1. У каждого устройства есть собственный маленький мозг — контроллер и прошивка (firmware).
        1. контроллер:
            1. маленький «мозг» устройства, который управляет его работой.
            2. Он может быть отдельным микропроцессором или логической схемой,
            3. превращает “общие команды” от ОС или драйвера в конкретные действия устройства.
            4. примеры:
                1. SSD / HDD:
                    1. Контроллер управляет чтением и записью данных в память/на магнитные пластины.
                    2. Он решает, в какие ячейки писать данные, как исправлять ошибки, оптимизировать скорость.
                2. Видеокарта (GPU):
                    1. Контроллер GPU управляет потоками пикселей, текстур и шейдерами.
                    2. Он выполняет команды от драйвера видеокарты.
                3. Клавиатура / мышь:
                    1. Маленький микроконтроллер читает нажатия кнопок и отправляет сигналы в ПК.
                4. Сетевой адаптер
                    1. Контроллер управляет отправкой/приёмом сетевых пакетов и обработкой ошибок.

Уровень «голого железа:
    1. CPU выполняет машинные инструкции (сложение, чтение из памяти, переход по адресу).
    2. RAM просто хранит данные и команды.
    3. GPU выводит картинку, но только если его заставили через драйвер.
    4. Устройства обмениваются сигналами через шины (PCIe, SATA, USB):
        шина(bus):
            1. это канал передачи данных, по которому устройства обмениваются информацией между собой,
               проще говоря это, дорога, по которой «едут» биты, команды и сигналы.
            2. Основные виды шин в ПК:
                1. PCIe (Peripheral Component Interconnect Express)
                    1. Современная высокоскоростная шина для видеокарт, SSD, сетевых карт.
                    2. Быстро передаёт большие объёмы данных между устройством и CPU/RAM.
                2. SATA (Serial ATA)
                    1. Используется для подключения жёстких дисков и SSD.
                    2. Передаёт данные между диском и материнской платой.
                3. USB (Universal Serial Bus)
                    1. Универсальная шина для внешних устройств: флешки, мышки, клавиатуры, принтеры.
                4. Другие примеры
                    1. I²C, SPI, CAN — для мелких устройств и сенсоров (чаще в встроенных системах).
            3. Как это работает
                1. CPU или контроллер посылает команду устройству через шину:
                    1. Адресация устройств:
                        1. Каждое устройство в системе имеет уникальный адрес или регистровое пространство, через которое оно доступно.
                        2. Адрес — это как номер квартиры на улице: CPU «знает», куда послать сигнал.
                        3. Например:
                            1. PCIe-устройства имеют bus:device:function адреса.
                            2. USB-устройства получают адрес при подключении через контроллер USB.
                            3. SATA-диски имеют порт на контроллере, через который к ним обращаются.
                    2. Контроллеры и шины
                        1. Шина — это канал передачи.
                        2. Контроллер (видеокарты, диска, USB) слушает только пакеты, адресованные ему.
                        3. CPU «пишет» данные/команду на шину с адресом конкретного устройства.
                        4. Все остальные устройства игнорируют сигнал.
                    Пример:
                        1. Допустим, CPU хочет записать данные на SSD:
                        2. ОС вызывает системный вызов: write(file, data).
                        3. Ядро через драйвер SSD формирует команду для контроллера SSD.
                        4. Команда включает адрес устройства (например, через SATA-порт 0).
                        5. Контроллер SSD «видит» свой адрес на шине → принимает команду → пишет данные в NAND.
                2. Устройство отвечает через ту же шину.
                3. Шина может передавать:
                    1. данные (например, байты файла),
                    2. адреса (куда положить данные),
                    3. сигналы управления (например, “готов к приёму данных”).
                
1. Процессор и чип
    1. Чип — это физическая микросхема, кусочек кремния с транзисторами.
    2. Процессор (CPU) — это устройство на чипе, которое умеет исполнять инструкции.
    3. Он содержит ядра, кеш, контроллеры шины и набор транзисторов, реализующих логику.
    4. Иногда в одном чипе может быть несколько “процессоров” или ядер → мульти-ядерный CPU.
    5. То есть когда говорят «процессор на чипе», это не тавтология, а просто уточнение: процессор реализован внутри кремниевой микросхемы.
2. Микропроцессор
    1. Термин микропроцессор — это исторически «CPU, полностью на одном чипе».
    2. Раньше CPU были разнесены на несколько отдельных микросхем (ALU, регистры, контроллер памяти).
    3. Сейчас любой современный CPU — это микропроцессор, потому что всё собрано в одном кристалле.
3. Своя программа / инструкции / кеш
    1. Инструкции — набор операций, которые CPU умеет выполнять (сложение, умножение, чтение из памяти, переход по адресу).
    2. Кеш — маленькая супербыстрая память внутри CPU, чтобы не тратить время на RAM.
    3. Программа внутри CPU — это, если иметь в виду микрокод (microcode), который обновляет и исправляет поведение инструкций CPU.
4. кеш в CPU хранятся путем связки транзисторов но без удерживания электричества(она сама себя пддерживает), это вид кеша называется SRAM

1. Что такое ядро
    1. Ядро — это отдельный исполнитель команд внутри процессора.
    2. Оно умеет выполнять инструкции программы, работать с регистрами, арифметикой, логикой и памятью.
    3. Процессор может иметь одно ядро (single-core) или несколько ядер (multi-core), которые работают параллельно.
2. Из чего состоит ядро
    1. Простейшее ядро содержит:
        1. Арифметико-логическое устройство (ALU) — выполняет операции сложения, умножения, сравнения.
        2. Регистры — маленькая быстрая память для промежуточных данных.
        3. Блок управления — решает, какие инструкции и в каком порядке выполнять.
        4. Кэш (L1(для 1 и 2 ядра), иногда L2(общая для 2 потоков ядра))
           — супербыстрая память для хранения часто используемых данных и команд.
           есть еще L3 (это память для всех потоков\ядер)
        L1 - самая быстрая, L2 - медленее, L3 - еще медленее, RAM - самая медленная
3. Зачем несколько ядер
    1. Если у процессора несколько ядер, каждая программа может выполняться параллельно, либо несколько программ одновременно.
    2. Пример: 4-ядерный процессор = 4 «мини-CPU» внутри одного чипа, которые могут работать независимо.

1. Что такое RAM
    1.RAM (Random Access Memory) — это оперативная память, куда процессор загружает данные и программы во время работы компьютера.
    2.Важное свойство: данные хранятся только пока есть питание.
    3.Когда компьютер выключается — RAM стирает всё содержимое.
2. Зачем нужна RAM
    1. Процессор очень быстрый, а диск (SSD/HDD) гораздо медленнее.
    2. CPU не может напрямую работать с медленным диском без тормозов.
    3. Поэтому программы и данные загружаются в RAM, чтобы процессор мог работать быстро.
    4. Пример:
        1. Ты запускаешь браузер → файлы программы и её данные загружаются в RAM.
        2. CPU обращается к RAM за инструкциями и данными.
        3. Когда браузер закрыт → RAM освобождается.
3. Как RAM взаимодействует с процессором
    1. CPU посылает адрес и сигнал «читаю/пишу».
    2. RAM отдаёт или принимает данные по шине.
    3. Кэш процессора ускоряет доступ к часто используемым данным, чтобы CPU не тратил время на медленную RAM.
4. данные в RAM хранятся путем удерживания 1 тразистера + 1 конденсатора(он хранит электричество), это вид кеша называется DRAM

1. Что такое SSD
    1. SSD — это накопитель данных без движущихся частей, в отличие от старых жёстких дисков (HDD).
    2. Данные хранятся в NAND-флеш-памяти.
    3. SSD работает быстро, потому что нет вращающихся пластин и механических головок.
    4. Как и RAM, флеш-память энергонезависимая — данные сохраняются без питания.
2. Структура SSD
    1. Флеш-память (NAND) — где реально хранятся биты (0 и 1).
    2. Контроллер SSD — маленький микропроцессор с прошивкой, который управляет памятью:
        1. решает, в какие ячейки записывать данные,
        2. управляет кэшированием и скоростью доступа,
        3. исправляет ошибки (ECC),
        4. балансирует износ памяти (wear leveling).
    7. Кэш DRAM (не всегда) — ускоряет доступ к данным.
3. Как SSD взаимодействует с CPU
    1. CPU/ОС через драйвер посылает команду на запись или чтение.
    2. Контроллер SSD «переводит» команду на конкретные ячейки флеш-памяти.
    3. Данные проходят по шине (SATA, PCIe) → CPU.

1. Что такое материнская плата
    1. Материнская плата — это основа, на которой собирается весь компьютер.
    2. Она соединяет все компоненты: процессор, RAM, видеокарту, SSD/HDD, периферийные устройства.
    3. Фактически это большая печатная плата с проводниками и разъёмами.
    4. На плате есть чипсет, слоты, разъёмы, контроллеры и BIOS/UEFI.
2. Основные части материнской платы
    1. Сокет CPU — место для установки процессора.
    2. Слоты RAM — куда вставляется оперативная память.
    3. Чипсет — «мост» между CPU и другими устройствами, управляет шинами.
    4. Слоты PCIe — для видеокарт, сетевых карт, SSD.
    5. Разъёмы SATA/USB — подключение накопителей и периферии.
    6. BIOS/UEFI-чип — маленькая микросхема с прошивкой для запуска компьютера.
    7. Питание и разъёмы — распределяют напряжение по компонентам.
3. Зачем нужна материнская плата
    1. Она соединяет все компоненты в одну систему.
    2. Управляет шинами и сигналами между устройствами.
    3. Обеспечивает питание и стабильность работы.
    4. Хранит BIOS/UEFI, чтобы компьютер мог стартовать.

1. Что такое видеокарта
    1. Видеокарта (GPU) — это специализированный процессор для обработки графики, изображений и иногда вычислений общего назначения.
    2. Она ускоряет отрисовку картинок, 3D-графики, видео и интерфейсов.
    3. Современные GPU имеют собственную память (VRAM) и контроллер, чтобы работать автономно от CPU.
2. Основные части видеокарты
    1. GPU-чип — главный процессор, который выполняет вычисления для графики.
    2. VRAM (видеопамять) — быстрая память для текстур, кадрового буфера и данных, с которыми GPU работает напрямую.
    3. Контроллер памяти — управляет чтением/записью в VRAM.
    4. Видеовыходы (HDMI, DisplayPort) — для подключения мониторов.
    5. BIOS видеокарты — маленькая прошивка, которая инициализирует GPU и управляет базовыми настройками.
3. Как видеокарта взаимодействует с CPU и остальной системой
    1. CPU через шину PCIe отправляет команды видеокарте (например, отрисовать кадр игры).
    2. Контроллер GPU управляет VRAM и ядром GPU, выполняет инструкции.
    3. Обработанные данные уходят на выходы для монитора.
    4. Иногда видеокарта может работать почти автономно (особенно в вычислительных задачах или рендеринге), разгружая CPU.

1. Что такое монитор
    1. Монитор — это устройство, которое показывает визуальную информацию, обработанную компьютером.
    2. Он не выполняет вычисления, а принимает уже готовый сигнал от видеокарты.
    3. Современные мониторы могут быть ЖК (LCD), LED или OLED.
2. Основные части монитора
    1. Дисплей (панель) — физические пиксели, которые показывают изображение.
    2. Электроника управления — контроллер, который переводит сигнал видеокарты в команды для пикселей.
    3. Порты ввода — HDMI, DisplayPort, USB-C и др., через которые монитор получает сигнал.
    4. Блок питания — обеспечивает питание панели и электроники.
3. Как монитор взаимодействует с компьютером
    1. Видеокарта формирует изображение и отправляет его через шину PCIe → видеовыход → кабель HDMI/DisplayPort.
    2. Контроллер монитора преобразует сигнал в управление пикселями.
    3. Дисплей показывает картинку на экране.

1. Что такое блок питания
    1. Блок питания — это устройство, которое преобразует сетевое напряжение (~220 В или 110 В) в низковольтное постоянное напряжение, которое может безопасно использовать компьютер.
    2. Основная задача: обеспечить стабильное питание для всех компонентов ПК.
    3. Без блока питания компьютер не включится.
2. Основные функции блока питания
    1. Преобразование напряжения
    2. Сеть даёт ~220 В переменного тока.
    3. PSU превращает это в +12 В, +5 В и +3.3 В постоянного тока для компонентов.
    4. Стабилизация напряжения
    5. Поддерживает постоянное напряжение даже при скачках сети.
    6. Защита компонентов
    7. От перегрузки, короткого замыкания, перегрева и перенапряжения.
    8. Питание отдельных устройств
    9. CPU, GPU, материнская плата, SSD/HDD, вентиляторы и периферия получают отдельные линии питания.
3. Как блок питания взаимодействует с ПК
    1. Подключается напрямую к материнской плате (24-pin + 4/8-pin для CPU) и отдельным кабелям для видеокарты, накопителей и вентиляторов.
    1. Все компоненты получают постоянное напряжение нужного уровня, чтобы их микросхемы могли работать.

1. Что такое микросхема
    1. Микросхема — это маленький кусочек кремния, на котором сосредоточена электронная схема, способная выполнять определённые функции.
    2. Внутри — транзисторы, резисторы, конденсаторы, соединённые проводниками.
    3. Может быть цифровой (логические схемы, процессоры, память) или аналоговой (усилители, сенсоры).
2. Виды микросхем
    1. Процессорные (CPU, GPU) — выполняют инструкции, вычисляют данные.
    2. Память (RAM, Flash, VRAM) — хранят данные.
    3. Контроллеры и микроконтроллеры — управляют устройствами, реализуют прошивку.
    4. Аналоговые — преобразуют сигналы, усиливают, фильтруют.
3. Почему микросхемы важны
    1. Практически все компоненты ПК состоят из микросхем: CPU, GPU, RAM, SSD, контроллеры, даже монитор и блок питания содержат микросхемы.
    2. Микросхема упаковывает сложную электронику в компактный чип, позволяя устройствам быть маленькими и быстрыми.
