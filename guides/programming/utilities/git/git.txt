https://learngitbranching.js.org/ # site to learn git

git commit -                               ( register the modifications to the git database )
git checkout [branch or commit] -          ( change current branch/commit to the branch/commit specified )
git merge [branch or commit] -             ( merge the branch/commit into the current branch/commit that you are on )


HEAD -                                     (
                                            last commit or branch your are on,
                                            detached head state - move head from branch to commit like git checkout [commit name] instead of branch
                                           )

git log -                                  ( get all the commits by their hashes )

^ -                                        ( moving up by 1 commit: git checkout main^, main^^, HEAD^ )
~<num> -                                   ( moving up by <num> commits )
git checkout HEAD~^2^2 -                   ( 
                                            you can chain modifiers ^<number>,
                                            where <number> means which parent of merged commits it will go to,
                                            ^ - to the first, ^2 - to the second and so on
                                           )

git branch -f [branch] [branch or commit] - ( force a branch to assign to a branch/commit )

git reset [branch or commmit] -            ( reverse changes by moving n commits )
git revert [branch or commit] -            ( reverse changes by copying the current commit under it without the changes made to it )

git cherry-pick [<commit1> <commit2> <commitN>] - ( copies commits bellow the current postioin where you are, any commit from any position )

git rebase -                               ( instead of merging from 2 commits, it takes the commit and puts it under another, so it becomes linear )
git rebase [branch or commit to add] [branch or commit to add into] - (
                                                                       if only branch to add is present,
                                                                       then it is used to rebase from into the current branch you are on
                                                                      )
git rebase -i [position] -                 (
                                            -i means interactive selects, drop, reoder, squash, amend and etc of commit,
                                            postion: only going up by commits
                                            you can change the order of commits with rebase -i,
                                            then [git commit â€”amend] to approve the changes and reorder it back
                                           )

git tag -                                  (
                                            its a way to mark some spot permanently so you can refer to it later,
                                            you cant checkout this tag and then modify it, its a mark in commit tree
                                           )
git tag [tag name] [commit name] -         ( if no commit, then HEAD is used )
git describe [commit]  -                   ( print the closest git tag, if no commit, HEAD used instead )

git fetch -                                (
                                            downloads the modifications from remote repository to local repository,
                                            BUT DOESNT UPDATE IT, basically sync local repo with remote repo.
                                            without args just downloads all the commits for all local remote branches
                                            )
git fetch origin foo  -                    (
                                            the same now, but goes to foo on remote repo,
                                            takes commits that arent present on our local origin/foo,
                                            puts it there but wont update because of git fetch technique
                                           )
git fetch <source>:<destination> -         (
                                            <source> is a place in remote repo
                                            <destination> is a place in local repo, the opposite of git push <source>:<destination>
                                           )
git fetch <soruce>:new_branch_name -       ( will create the branch on local repo and fetch to it )
git fetch origin :bar -                    ( will add new local branch bar, without <source> )

git push -                                 ( uploading your changes to specified remote and updating that remote with your new commits )
git push <remote> <place> -                (
                                            Example: git push origin main,
                                            main is both source and destination here,
                                            translates as: go to the branch named "main" in my repository,
                                            grab all the commits, and then go to the branch "main" on the remote named "origin" ,
                                            place whatever commits are missing on that branch and then tell me when you're done,
                                            also it now ignores on which branch we are because we speified the <remote> and <place>
                                           )
git push origin <source>:<destination> -   (
                                            same but now instead of 1 arg that will be both source and destination,
                                            we know specify  it explicit [git push origin foo^:main],
                                            <source> - any git location that it can resolve.
                                            <destination> - branch name on remote repo
                                           )
git push origin main:new_branch_name -     (
                                            it will create a new branch on the remote repo and a local remote branch,
                                            in your local remote repo on the same place as <source> specified
                                           )
git push origin :foo  -                    ( empty <source> will delete the foo branch on remote repo and local remote branch origin/foo )

git pull origin foo -                      ( is equal to: git fetch origin foo; git merge o/foo )
git pull origin bar~1:bugFix -             ( is equal to git fetch origin bar~1:bugFix; git merge bugFix )
git pull origin <source>:new_branch_name - (
                                            will create a new branch name,
                                            give it the commits downloaded from source,
                                            then merge it into the branch we are on
                                           )

TIPS:
    1. if you are on local remote branch, and you commited, git puts you in detached mode, it means in will update when the remote branch updates

    2. you cant push to a remote repo if it was changed, it forces you to take all the repo changes, then you can push to it, here is how:
    2.1 git fetch; git rebase o/main; git push                           ( 1 example )
    2.2 git fetch; git merge o/main; git push                            ( 2 example )
    2.3 git pull --rebase; git push                                      ( 3 example )
    2.4 git pull; git push                                               ( 4 example )

    3. you can also track local remote branches like so:
    3.1 git checkout -b branch_name o/main                               ( 1 example )
    3.2 git branch -u o/main branch_name                                 ( 2 example )
    3.3 git branch -u o/main (sets the current branch to track o/main)   ( 3 example )
    3.4 keep in mind that if there was another branch that tracked the o/main, it wont get updated if you pushed from new branch that tracks o/main

    4. after git fetch, you can get the modifications like so:
    4.1 git cherry-pick origin/main                                      ( 1 example )
    4.2 git rebase origin/main                                           ( 2 example )
    4.3 git merge origin/main                                            ( 3 example )
    4.4 git pull                                                         ( 4 example )

    5. if you pushed to a remote branch that you doesnt have right to push and got reject, then you must do this:
    5.1 create a branch on the commit you made changes
    5.2 push again but from new branch
    5.3 checkout to previous branch that was rejected
    5.4 git reset from previous branch to avoid future confilcts

    6. Restoring deleted files:
    6.1 git checkout HEAD <filename>                              ( restore a file after deletion, both staged and not)
    6.2 git reset --hard HEAD~1                                   ( commited, but didnt push. If you dont include --hard, then deletion will appear as                                                                  unstage, then you can use 6.1 option)
    6.3.1 git log  <filename>                                     ( commited & pushed, search history for commits for deleted file)
    6.3.2 git checkout <commit hash> <filename>                   ( commited & pushed, restore the file on specific commit)
    6.3.3 git checkout <deletion commit hash>~1 <filename>        ( commited & pushed, restore the file before the deletion commit)
    6.4 6.3.1, 6.3.2, 6.3.3                                       ( commited n times)
    6.5 git revert --no-commit <commit>                           ( to not break git tree, just revert the changes in commit,
                                                                    --no-commit option lets you choose what changes to revert, omit it for full revert)
    7 Delete some files from index tree and put them in .gitignore file
    7.1 git rm -r --cached .                                      ( delete files from index tree)
    7.2 git add .                                                 ( add them again)
    7.3 git commit -m "your message"                              ( commit)

    8.1 Fix and solve merge confilcts
    8.2 git merge --abort                                         ( undo merge)
    8.3 git checkout --ours or --theirs confilcted path_to_file   ( choose which editing is used, --ours means my, --their means their)
    8.4 git add file_path                                         ( add the confilcted file)
    8.5 git commit                                                ( commit)
    
    9 Changing git email and name
    9.1 git config --global user.name "your_name"                 ( globally, before commit and push)
    9.2 git config --global user.email "your_email"               ( globally, before commit andp push)
    9.3 git config user.name "your_name"                          ( per repository, before commit and push)
    9.4 git config user.email "your_email"                        ( per repository, before commit andp push)
    9.5 git commit --author="your_name <your_email>"              ( change just for the next commit)
    9.6 git commit --amend --author="your_name"                   ( change for last commit)
    9.7.1 git rebase -i -p <commit-hash>                          ( choose all the commits you want to edit)
    9.7.2 git commit --amend --author="your_name <your_email>"    ( change for the current commit chose for editing)
    9.7.3 git rebase --continue                                   ( continue the interactive panel)
    9.8 git filter-branch                                         ( another way of changing things, search it up, its not easy)

    10 Adding an empty folder
    10.1 just add an empty file named .keep and as a result it will be visible for git, just a name convention

    11 Deleting a remote branch
    11.1 git push <remote_name> --delete <branch_name>            
    11.2 keep in mind, remote and local branches are apart, you must delete them excplicilty, even if one track another

    12 Saving changes for latter actions
    12.1 git stash                                                ( stash your changes(save))
    12.2 git pop                                                  ( retrieve those changes)

    13 Creating a local branch from remote one
    13.1 git checkout --track <branch_name> origin<remote_branch>               ( because of --track it creates a local branch from remote one, if
                                                                                  <branch_name> is omitted then it takes the remote branch name)

    14 Remove untracked files from working tree
    14.1 git clean -fd                                            ( clean removes untracked files, -f forces it, -d removes also untracked directories,
                                                                    it cannot be undone)
    15 Creating branches
    15.1 git branch <branch_name>                                 ( creates a branch)
    15.2 git branch <branch_name> <commit-hash>                   ( creates a branch on <commit-hash> pos)
    15.3 git branch <branch_name> <tag>                           ( creates a  branch on <tag> pos)
    15.4 git branch <branch_name> <another_existing_branch>       ( creates a branch based on another branch so <branch_name> share all commits and
                                                                    history of it)
    16 Undo git add or restore a file modifications
    16.1 git restore <file_name>                                  ( will remove any modifications from file)
    16.2 git restore --staged <file_name>                         ( will remove the <file_name> from stage area)
    16.3 git reset <file_name>                                    ( will remove the <file_name> from stage area)

    17 Adding a remote to a repo if it was initialized and not created on web browser
    17.1 git remote add origin <link_to_it>                       ( for example https://github.com/gittower/example.git)

    18 Deleting stale remote branches that are still referenced on local repo
    18.1 git fetch --prune origin                                 ( fetch and delete)
    18.2 git remote prune origin                                  ( just delete)

    19 Finding bugs with git bisect
    19.1 git bisect start                                         ( start the bisect)
    19.2 git bisect bad <commit>                                  ( give the bad commit)
    19.3 git bisect good <commit>                                 ( give the good commit)
    19.4 git bisect good/bad                                      ( now we run our app and see if current commit is good or bad, and so on)
    19.5 git bisect reset                                         ( when you found the problem commit, cancel the bisect proccess)

    20 Squash commits into one
    20.1 git rebase -i HEAD~3                                     ( combine last 3 commits as one for example)
    20.2 git merge --squash feature/login                         ( all commits from feature/login branch will go as one commit instead of creating a
                                                                    merge commit, the new commit will  have only 1 parent and not 2 as with merge)
    21 Diff branch, files, etc.
    21.1 git diff <branch_name1> <branch_name2>                   ( see differences between branch1 and branch2)
    21.2 git diff <branch_name1>..<branch_name2>                  ( same as 21.1, comparing the latest commits)
    21.3 git diff <branch_name1>...<branch_name2>                 ( take last commit of <branch_name2>
                                                                    and diff it with the common ancestor of both <branch_name1> and <branch_name2>)
    21.4 git diff <branch>                                        ( see differences between working tree and copy working tree)
    21.5 git diff --staged <branch>                               ( see differences betweeen working tree and index tree)
    21.6 git diff <branch_name1> <branch_name2> <file_name>       ( see difference in <file_name> from branch1 and branch2)
    21.7 git log <branch_name1> <branch_name2>                    ( see differences between commits for both branches)
    21.8 git log <branch_name1>..<branch_name2>                   ( same as 21.7)
    
    22 Delete the initial commmit
    22.1 git update-ref -d HEAD                                   ( delete the initial commit)
