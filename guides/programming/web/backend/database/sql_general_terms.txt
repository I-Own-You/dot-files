NoSql vs Sql in databases:
SQl (relational db, stores unique identifiers for tables(row, column) so it can access it):
  1. SQL the main language used for using the db
  2. Suitable for structured data with predefined schema
  3. Data is stored in tables with columns and rows
  4. Follows ACID properties
  5. Supports JOIN and complex queries
  6. Requires vertical scaling to handle large volumes of data (cpu, ram, ssd (stroge))
NoSql:
  1. Not only SQL is used to interfere with the db
  2. Suitable for unstructured and semi-structured data
  3. Data is stored in collections or documents (graphs, jsons, key-value, wide-column .etc)
  4. Does not necessarily follow ACID properties
  5. 	Does not support JOIN and complex queries
  6. Horizontal scaling is possible to handle large volumes of data ()

Vertical scalling means another machine with better hardware (cpu, ram, ssd(capacity)):
  1. if machine goes down, all db is shutdown
  2. Less important systems and workloads.
  3. Systems and workloads that arenâ€™t likely to need additional scale in the future.
  4. Keeping initial costs down (but it may increase future costs).
  5. Systems and workloads that do not require high availability, high performance, or multi-region deployment.
Horizontal scalling means adding more machines to the previous one but with the same hardware
  1. Mission-critical (tier 0) and important (tier 1) systems and workloads.
  2. Systems and workloads that are likely to need additional scale in the future as the company grows.
  3. Systems and workloads that do require high availability, high performance, or multi-region deployment.

  
-- ACID principles in databases:
-- Atomicity - each statement in a transaction (to read, write, update or delete data) is treated as a single unit. Either the entire statement is executed, or none of it is executed. This property prevents data loss and corruption from occurring if, for example, if your streaming data source fails mid-stream.
-- Consistency - ensures that transactions only make changes to tables in predefined, predictable ways. Transactional consistency ensures that corruption or errors in your data do not create unintended consequences for the integrity of your table.
-- Isolation - when multiple users are reading and writing from the same table all at once, isolation of their transactions ensures that the concurrent transactions don't interfere with or affect one another. Each request can occur as though they were occurring one by one, even though they're actually occurring simultaneously.
-- Durability - ensures that changes to your data made by successfully executed transactions will be saved, even in the event of system failure.

collation  [rules that dictate how string data is sorted, compared, and searched within a database].
          - string order: defines the order of characters, case sensitivity, 
            and whether accents and diacritics are considered when performing string operations
          - affects order in which strings are sorted when using ORDER BY clauses in SQL queries
          - string comparison: define how strings are compared for equality or inequality. 
            this includes considering factors such as case sensitivity, accent sensitivity, and character width
          - string searching: affects how string comparison operators like LIKE or = operate
          - can be setup at different db levels:
                                                 - database level
                                                 - table level
                                                 - expression level

-- the order in the database is not specified, its always random unless specified
-- rows from table also doesnt have unique identifiers so rows can have duplicates unless specified
