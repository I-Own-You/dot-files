$mainMod = SUPER

bind = $mainMod, T, pin, active # only floating window can be pinned
bind = $mainMod, BACKSPACE, exec, hyprlock
bind = $mainMod, C, exec, hyprpicker -a
bind = $mainMod, P, exec, hyprshot -m region
bind = $mainMod, PRINT, exec, hyprshot -m window
bind = $mainMod, RETURN, exec, kitty
bind = $mainMod, Q, killactive, 
# bind = $mainMod, E, exec, thunar
bind = $mainMod, E, exec, nautilus
# bind = $mainMod, E, exec, kitty --class yazi -- yazi
bind = $mainMod, V, togglefloating, 
bind = $mainMod, S, togglesplit, # dwindle

# Move focus with mainMod + arrow keys
bind = $mainMod, h, movefocus, l
bind = $mainMod, l, movefocus, r
bind = $mainMod, k, movefocus, u
bind = $mainMod, j, movefocus, d
bind = $mainMod, n, cyclenext

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, period, workspace, r+1
bind = $mainMod, comma, workspace, r-1

# rofi
bind = ALT, Q, exec, ~/dot-files/scripts/close_rofi.sh
# rofi -show combi -modes combi -combi-modes "window,drun,run"
# bind = ALT, TAB, exec, hyprctl clients -j | jq -r '.[] | .class + "\t" + .title + "\t\t\t\t\t\t\t\t\t" + .address' | rofi -dmenu -i | cut -f 11 | xargs -r -I {} hyprctl dispatch focuswindow address:{}

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = CONTROL + ALT, l, movetoworkspace, r+1
bind = CONTROL + ALT, h, movetoworkspace, r-1
bind = CONTROL + ALT, 1, movetoworkspace, 1
bind = CONTROL + ALT, 2, movetoworkspace, 2
bind = CONTROL + ALT, 3, movetoworkspace, 3
bind = CONTROL + ALT, 4, movetoworkspace, 4
bind = CONTROL + ALT, 5, movetoworkspace, 5
bind = CONTROL + ALT, 6, movetoworkspace, 6
bind = CONTROL + ALT, 7, movetoworkspace, 7
bind = CONTROL + ALT, 8, movetoworkspace, 8
bind = CONTROL + ALT, 9, movetoworkspace, 9
bind = CONTROL + ALT, 0, movetoworkspace, 0

bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# resize
bind = $mainMod, F, fullscreen, 0
bind = $mainMod, U, fullscreen, 1

# resize windows
bind = $mainMod, R, submap, resize # switch to submap called resize
submap = resize # start a submap called resize
binde = , l, resizeactive, 30 0
binde = , h, resizeactive, -30 0
binde = , k, resizeactive, 0 -30
binde = , j, resizeactive, 0 30
bind = $mainMod, R, submap ,reset # reset to go back to global submap
submap = reset # reset the submap

# move windows
bind = $mainMod, M, submap, move
submap = move
binde = , l, movewindow, r
binde = , h, movewindow, l
binde = , k, movewindow, u
binde = , j, movewindow, d
bind = $mainMod, M, submap, reset
submap = reset

# move windows
# bind = $mainMod, M, submap, move
# submap = move
# binde = , l, moveactive, 20 0 
# binde = , h, moveactive, -20 0
# binde = , k, moveactive, 0 -20
# binde = , j, moveactive, 0 20
# bind = $mainMod, M, submap, reset
# submap = reset

# Scroll through existing workspaces with mainMod + scroll
binde = $mainMod, mouse_down, workspace, r-1
binde = $mainMod, mouse_up, workspace, r+1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

bindel=, XF86AudioRaiseVolume, exec, wpctl set-volume -l 1.5 @DEFAULT_AUDIO_SINK@ 10%+
bindel=, XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 10%-
bindl=, XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindl= ALT, 1, exec, playerctl play-pause
bindl= ALT, 2, exec, playerctl next 
bindl= ALT, 3, exec, playerctl previous

#brightness
bindel=,XF86MonBrightnessDown,exec,brightnessctl set 10%-
bindel=,XF86MonBrightnessUp,exec,brightnessctl set +10%

#notification
bind = $mainMod, Y, exec, swaync-client -t -sw

# bind modifiers, bind[modifier]
# l -> locked, aka. works also when an input inhibitor (e.g. a lockscreen) is active.
# r -> release, will trigger on release of a key.
# e -> repeat, will repeat when held.
# n -> non-consuming, key/mouse events will be passed to the active window in addition to triggering the dispatcher.
# m -> mouse, see below
# t -> transparent, cannot be shadowed by other binds.
# i -> ignore mods, will ignore modifiers.
